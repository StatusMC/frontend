---
import { CONFIG } from "~/config.mjs";
import { javaPart, bedrockPart, queryPart, offlinePart } from "~/components/status/test-response-objects";
import Layout from "~/layouts/PageLayout.astro";
import GetStatus from "~/components/widgets/GetStatus.astro";
import Collapsible from "~/components/widgets/Collapsible.astro";

import JavaEditionSection from "../../components/status/sections/JavaEditionSection.astro";
import BedrockEditionSection from "../../components/status/sections/BedrockEditionSection.astro";
import QuerySection from "../../components/status/sections/QuerySection.astro";
import ErrorSectionReplacer from "../../components/status/sections/ErrorSectionReplacer.astro";

export interface Props {
	ip: string;
}

const { ip }: Props = Astro.params;
const modules: string[] = Astro.url.searchParams.get("modules")?.split(",") || [];
export const prerender = false;

const queryParams: { [key: string]: string } = {};
Astro.url.searchParams.forEach((value, key) => {
	if (!key.startsWith("to_")) return;
	queryParams[key] = value;
});

async function getStatus() {
	const isNotTestIP = (ip, secondaryIp) =>
		!(secondaryIp === "test" || secondaryIp === "offline" || (secondaryIp === undefined ? (ip === "test" || ip === "offline") : false));

	const [modulesForUrl, modulesArgs] = (() => {
		const modulesForUrl: string[] = [];
		const modulesArgs: string[] = [];

		for (const moduleName of ["java", "bedrock", "query"]) {
			if (modules.includes(moduleName) && isNotTestIP(ip, queryParams[`to_${moduleName}`]))
				modulesForUrl.push(moduleName);
			if (queryParams[`to_${moduleName}`] !== undefined && isNotTestIP(ip, queryParams[`to_${moduleName}`]))
				modulesArgs.push(`to_${moduleName}=${encodeURIComponent(queryParams[`to_${moduleName}`])}`);
		}

		return [modulesForUrl, modulesArgs];
	})();

	const urlForGettingStatus =
		CONFIG.apiUrl +
		"/v1/" +
		ip +
		"?modules=" +
		modulesForUrl.join(",") +
		(modulesArgs.length !== 0 ? "&" + modulesArgs.join("&") : "");

	if (modulesForUrl.length !== 0) console.log("Fetching from " + urlForGettingStatus)
	const statusResult = modulesForUrl.length !== 0 ? await fetch(urlForGettingStatus).then((res) => res.json()) : {};

	if (modules.includes("java") && !isNotTestIP(ip, queryParams["to_java"]))
		statusResult["java"] =
			queryParams["to_java"] === "offline" ? offlinePart : ip === "offline" ? offlinePart : javaPart;
	if (modules.includes("bedrock") && !isNotTestIP(ip, queryParams["to_bedrock"]))
		statusResult["bedrock"] =
			queryParams["to_bedrock"] === "offline" ? offlinePart : ip === "offline" ? offlinePart : bedrockPart;
	if (modules.includes("query") && !isNotTestIP(ip, queryParams["to_query"]))
		statusResult["query"] =
			queryParams["to_query"] === "offline" ? offlinePart : ip === "offline" ? offlinePart : queryPart;

	return statusResult;
}

const statusResult = await getStatus();
---

<Layout meta={{
	title: `${ip} - Minecraft Server Status`,
	description: 
		`Get information about ${ip} and its status without launching Minecraft. ` +
		"This includes the Java Edition status, Bedrock Edition status and Query protocol. ",
}}>
	<GetStatus
		inputValues={{
			main: ip,
			java: queryParams["to_java"] || "",
			bedrock: queryParams["to_bedrock"] || "",
			query: queryParams["to_query"] || "",
		}}
		isChecked={{
			java: modules.includes("java"),
			bedrock: modules.includes("bedrock"),
			query: modules.includes("query"),
		}}
	/>
	{
		modules.length !== 0 ? (
			<section class="mx-auto max-w-6xl px-4 pb-8 lg:px-8 lg:pb-20">
				<div class="rounded border-2 border-solid border-slate-300 bg-slate-50 p-5 text-black dark:border-slate-500 dark:bg-slate-800 dark:text-white">
					{statusResult.java ? (
						<div class="my-3">
							<Collapsible title="Java Response" openByDefault={modules.length === 1}>
								{statusResult.java.online ? (
									<JavaEditionSection status={statusResult.java} />
								) : (
									<ErrorSectionReplacer status={statusResult.java} />
								)}
							</Collapsible>
						</div>
					) : null}
					{statusResult.bedrock ? (
						<div class="my-3">
							<Collapsible title="Bedrock Response" openByDefault={modules.length === 1}>
								{statusResult.bedrock.online ? (
									<BedrockEditionSection status={statusResult.bedrock} />
								) : (
									<ErrorSectionReplacer status={statusResult.bedrock} />
								)}
							</Collapsible>
						</div>
					) : null}
					{statusResult.query ? (
						<div class="my-3">
							<Collapsible title="Query Response" openByDefault={modules.length === 1}>
								{statusResult.query.online ? (
									<QuerySection status={statusResult.query} />
								) : (
									<ErrorSectionReplacer status={statusResult.query} />
								)}
							</Collapsible>
						</div>
					) : null}
				</div>
			</section>
		) : null
	}
</Layout>
