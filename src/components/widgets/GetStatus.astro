---
import generateID from "~/utils/generate-id";
import uppercaseFirstLetter from "~/utils/uppercase-first-letter";

export interface Props {
	inputValues: {
		main: string;
		java: string;
		bedrock: string;
		query: string;
	};
	isBedrockChecked: {
		java: boolean;
		bedrock: boolean;
		query: boolean;
	};
}

const {
	inputValues = {
		main: "",
		java: "",
		bedrock: "",
		query: "",
	},
	isChecked = {
		java: true,
		bedrock: false,
		query: false,
	},
}: Props = Astro.props;

const id = generateID(5);
---

<div class="mx-auto max-w-6xl px-4 py-16 lg:px-8 lg:py-20" x-data={id}>
	<h1 class="text-5xl font-black">Get server status</h1>
	<p class="mt-2 text-xl">Easily and rapidly access information about Minecraft servers.</p>
	<form class="mt-2">
		<div class="inline-flex w-full">
			<div class="z-10 w-full">
				<label class="sr-only" for={`${id}-input`}>Address</label>
				<input
					type="text"
					required
					class="box input !rounded-r-none"
					placeholder="hypixel.net"
					value={inputValues.main}
					id={`${id}-input`}
					x-model="serverAddress"
					@keyup.enter="handleGetStatus"
				/>
			</div>
			<button
				type="button"
				class="button w-max whitespace-nowrap rounded-r bg-primary px-3 py-2 text-xl text-white disabled:bg-muted"
				@click="handleGetStatus"
				:disabled="!serverAddress"
			>
				Get<span class="hidden md:inline"> server status</span>
			</button>
		</div>
		<div class="mb-4 mt-1 flex items-center">
			{
				["java", "bedrock", "query"].map((moduleName) => (
					<div class="flow-root">
						<input
							id={`${id}-is-${moduleName}`}
							type="checkbox"
							class="peer h-5 w-5 cursor-pointer rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600"
							x-model={`is${uppercaseFirstLetter(moduleName)}`}
						/>
						<label
							for={`${id}-is-${moduleName}`}
							class="ml-2 cursor-pointer text-base font-medium text-gray-900 dark:text-gray-300"
						>
							{uppercaseFirstLetter(moduleName)} Edition?
						</label>
						<div class="invisible mr-3 mt-2 peer-checked:visible">
							<label class="sr-only" for={`${id}-${moduleName}-input`}>
								Different address for {moduleName} edition
							</label>
							<input
								type="text"
								class="box input"
								placeholder="Other IP?"
								value={inputValues[moduleName]}
								id={`${id}-${moduleName}-input`}
								x-model={`${moduleName}IP`}
								@keyup.enter="handleGetStatus"
							/>
						</div>
					</div>
				))
			}
		</div>
	</form>
	<!-- No modules selected toast -->
	<button
		type="button"
		@click="closeToast()"
		x-show="toastIsOpen"
		x-transition.duration.300ms
		class="fixed right-8 top-20 z-50 rounded-md bg-red-500 px-4 py-2 text-white transition hover:bg-red-600"
	>
		<div class="flex items-center space-x-2">
			<p class="font-bold">No modules selected!</p>
		</div>
	</button>

	<script define:vars={{ id: id, isChecked: isChecked, inputValues: inputValues }}>
		let timerToCloseTheToast;

		document.addEventListener("alpine:init", () => {
			// eslint-disable-next-line no-undef
			Alpine.data(id, () => ({
				isJava: isChecked.java,
				isBedrock: isChecked.bedrock,
				isQuery: isChecked.query,
				serverAddress: inputValues.main,
				javaIP: inputValues.java,
				bedrockIP: inputValues.bedrock,
				queryIP: inputValues.query,
				toastIsOpen: false,

				handleGetStatus() {
					let redirectTo = `/info/${encodeURIComponent(this.serverAddress)}?modules=`;
					let laterArgs = "&";

					for (const [module, isActive, ip] of [
						["java", this.isJava, this.javaIP],
						["bedrock", this.isBedrock, this.bedrockIP],
						["query", this.isQuery, this.queryIP],
					]) {
						if (!isActive) continue;
						if (!redirectTo.endsWith("=")) redirectTo += ",";
						redirectTo += module;
						if (ip) laterArgs += `to_${module}=${encodeURIComponent(ip)}&`;
					}
					if (laterArgs !== "&") redirectTo += laterArgs.slice(0, -1);

					if (redirectTo.endsWith("=")) {
						this.openToast();
						return;
					}
					window.location.href = redirectTo;
				},

				openToast() {
					// if (this.toastIsOpen) return;
					this.toastIsOpen = true;

					// reset time to 0 seconds
					clearTimeout(timerToCloseTheToast);

					// auto close toast after 5 seconds
					timerToCloseTheToast = setTimeout(() => {
						this.closeToast();
					}, 5000);
				},

				closeToast() {
					this.toastIsOpen = false;
				},
			}));
		});
	</script>
</div>
